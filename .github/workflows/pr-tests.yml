name: PR Tests with Puppeteer

on:
  pull_request:
    types: [opened, synchronize, reopened]
    branches: [main]

jobs:
  test:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
      issues: write
    
    # Service containers for database testing
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: test_user
          POSTGRES_DB: test_essentials
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Puppeteer
        run: npm install --save-dev puppeteer @types/puppeteer

      - name: Setup test environment variables
        run: |
          cat > .env.test << EOF
          POSTGRES_URL=postgresql://test_user:test_password@localhost:5432/test_essentials
          DATABASE_URL=postgresql://test_user:test_password@localhost:5432/test_essentials
          NEXTAUTH_SECRET=test-secret-key-for-ci
          NEXTAUTH_URL=http://localhost:3000
          NODE_ENV=test
          EOF

      - name: Run database migrations
        run: npm run db:push
        env:
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_essentials

      - name: Run linting
        run: npm run lint

      - name: Run type checking
        run: npm run typecheck

      - name: Build application
        run: npm run build
        env:
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_essentials
          NEXTAUTH_SECRET: test-secret-key-for-ci
          NEXTAUTH_URL: http://localhost:3000

      - name: Start application in background
        run: |
          npm run start &
          echo $! > .server_pid
        env:
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_essentials
          NEXTAUTH_SECRET: test-secret-key-for-ci
          NEXTAUTH_URL: http://localhost:3000
          PORT: 3000

      - name: Wait for application to be ready
        run: |
          timeout 60 bash -c 'until curl -s http://localhost:3000/api/health > /dev/null; do sleep 2; done' || true
          sleep 5

      - name: Run Puppeteer tests
        run: |
          # Create a simple test script if tests don't exist
          if [ ! -d "tests" ]; then
            mkdir -p tests
            cat > tests/puppeteer.test.js << 'TESTEOF'
          const puppeteer = require('puppeteer');
          const { spawn } = require('child_process');

          describe('Application E2E Tests', () => {
            let browser;
            let page;

            beforeAll(async () => {
              browser = await puppeteer.launch({
                headless: 'new',
                args: ['--no-sandbox', '--disable-setuid-sandbox', '--disable-dev-shm-usage']
              });
              page = await browser.newPage();
            });

            afterAll(async () => {
              await browser.close();
            });

            test('Homepage loads successfully', async () => {
              try {
                await page.goto('http://localhost:3000', { waitUntil: 'networkidle0', timeout: 30000 });
                const title = await page.title();
                expect(title).toBeTruthy();
                
                // Take screenshot for debugging if needed
                await page.screenshot({ path: 'homepage.png' });
                
                console.log('Homepage loaded successfully with title:', title);
              } catch (error) {
                console.error('Homepage test failed:', error);
                await page.screenshot({ path: 'homepage-error.png' });
                throw error;
              }
            }, 45000);

            test('Navigation works', async () => {
              try {
                await page.goto('http://localhost:3000', { waitUntil: 'networkidle0', timeout: 30000 });
                
                // Look for common navigation elements
                const navElements = await page.$$('nav, header, [role="navigation"]');
                expect(navElements.length).toBeGreaterThan(0);
                
                console.log('Navigation elements found:', navElements.length);
              } catch (error) {
                console.error('Navigation test failed:', error);
                await page.screenshot({ path: 'navigation-error.png' });
                throw error;
              }
            }, 45000);

            test('Page is responsive', async () => {
              try {
                // Test desktop view
                await page.setViewport({ width: 1920, height: 1080 });
                await page.goto('http://localhost:3000', { waitUntil: 'networkidle0', timeout: 30000 });
                await page.screenshot({ path: 'desktop-view.png' });

                // Test mobile view
                await page.setViewport({ width: 375, height: 667 });
                await page.reload({ waitUntil: 'networkidle0' });
                await page.screenshot({ path: 'mobile-view.png' });

                console.log('Responsive design tests completed');
              } catch (error) {
                console.error('Responsive test failed:', error);
                throw error;
              }
            }, 45000);
          });
          TESTEOF

            # Create Jest config for Puppeteer if it doesn't exist
            cat > jest.config.js << 'JESTEOF'
          module.exports = {
            testEnvironment: 'node',
            testMatch: ['**/tests/**/*.test.js'],
            testTimeout: 60000,
            setupFilesAfterEnv: ['<rootDir>/jest.setup.js']
          };
          JESTEOF

            # Create Jest setup file
            cat > jest.setup.js << 'SETUPEOF'
          // Global test setup
          jest.setTimeout(60000);
          SETUPEOF
          fi

          # Install Jest if not present
          npm install --save-dev jest
          
          # Run the tests
          npx jest tests/

      - name: Upload screenshots
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-screenshots
          path: '*.png'

      - name: Stop application
        if: always()
        run: |
          if [ -f .server_pid ]; then
            kill $(cat .server_pid) || true
            rm .server_pid
          fi

      - name: Comment PR with test results
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '❌ **CI Tests Failed**\n\nThe Puppeteer tests failed for this PR. Please check the logs and screenshots in the Actions tab.'
            });

      - name: Comment PR on success
        if: success()
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '✅ **CI Tests Passed**\n\nAll Puppeteer tests passed successfully!'
            });